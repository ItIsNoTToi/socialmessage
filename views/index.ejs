<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>2 FRIEND</title>
    <link rel="stylesheet" href="../stylesheets/main.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
</head>
<body>
    <section>
        <nav>
            <div class="logo">2 FRIEND</div>
        </nav>
    </section>

    <div class="container">
        <div class="sidebar">
            <ul>
                <li><a href="/">Home</a></li>
                <li><a href="/profile">Profile</a></li>
                <li><a href="/messages">Messages</a></li>
                <li>
                    <div class="search-bar">
                        <input type="text" id="searchInput" placeholder="Search..." />
                    </div>
                </li>
                <li>
                    <form action="/logout" method="get">
                        <button type="submit" class="logout-btn">Logout</button>
                    </form>
                </li>
            </ul>
        </div>

        <div class="main-content">
            <section class="new-post">
                <h2>Create New Post</h2>
                <form id="postForm">
                    <div>
                        <textarea name="content" placeholder="What's on your mind?" required></textarea>
                    </div>
                    <div>
                        <label>Community Post</label>
                        <input type="checkbox" name="IsCommunityPost" value="true" />
                    </div>
                    <div id="uploadForm">
                        <input type="file" id="mediaInput" name="media" accept="image/*, video/*" multiple />
                    </div>
                    <button type="submit">Post</button>
                </form>  
            </section>

            <section class="posts">
                <h2>Recent Posts</h2>
                <!-- Posts will be dynamically injected here -->
            </section>
        </div>

        <div class="friends">
            <h3>Friends</h3>
            <ul>
                <li>Friend 1</li>
                <li>Friend 2</li>
                <li>Friend 3</li>
                <!-- Add more friends as needed -->
            </ul>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        async function fetchPosts() {
            try {
                const response = await fetch('/post');
                const data = await response.json();
                const postsContainer = document.querySelector('.posts');
                postsContainer.innerHTML = '';

                if (data.posts && data.posts.length > 0) {
                    data.posts.forEach(postData => {
                        const post = postData.post;
                        postsContainer.innerHTML += `
                            <div class="post">
                                ${post.IsCommunityPost ? `<div><strong>Community Post:</strong> ${post.Community}</div>` : ''}
                                <h3>${post.Author.username}</h3>
                                <div>
                                    ${post.content}
                                </div>
                                <div class="media" id="media-${post._id}"></div>
                                
                                <div class="comments">
                                    <h4 style="display: flex;"> 
                                        <button class="like-btn" data-post-id="${post._id}">Like</button> 
                                        <button class="comment-btn" onclick="toggleComment(event)">Comments</button>
                                    </h4>
                                    <div id="comment" style="display: none;">
                                        <div class="comment-container">
                                            <textarea placeholder="Add a comment..." class="comment-input" data-post-id="${post._id}"></textarea>
                                            <button class="comment-btn" data-post-id="${post._id}">Comment</button>
                                            <button onclick="toggleComment(event)">Đóng</button>
                                        </div>
                                    </div>
                                    <div class="comment-list" id="comments-${post._id}"></div>
                                </div>
                                
                            </div>`;

                        // Get the media container for this specific post
                        const mediaContainer = document.getElementById(`media-${post._id}`);

                        if (postData.media && postData.media.length > 0) {
                            postData.media.forEach(postMedia => {
                                let mediaContent = '';
                                console.log(postMedia.MediaType, postMedia.filepath );
                                if (postMedia.MediaType === 'Image') {
                                    mediaContent = `<img src="../${postMedia.filepath}" alt="media" />`;
                                } else if (postMedia.MediaType === 'Video') {
                                    mediaContent = `<video controls><source src="../${postMedia.filepath}" type="video/mp4"></video>`;
                                } else if (postMedia.MediaType === 'Audio') {
                                    mediaContent = `<audio controls><source src="../${postMedia.filepath}" type="audio/mp3"></audio>`;
                                }
                                mediaContainer.innerHTML += mediaContent;
                            });
                        }
                    });
                } else {
                    postsContainer.innerHTML = `<p>No posts available.</p>`;
                }
            } catch (error) {
                console.error('Error fetching posts:', error);
            }
        }

        window.onload = fetchPosts;

        let mediaIds = [];
        document.getElementById('postForm').addEventListener('submit', async function (e) {
            e.preventDefault();

            const content = this.querySelector('textarea[name="content"]').value;
            const isCommunityPost = this.querySelector('input[name="IsCommunityPost"]').checked;
            const mediaInput = document.getElementById('mediaInput').files;


            if (mediaInput.length > 0) {
                const uploadPromises = Array.from(mediaInput).map(async (file) => {
                    const formData = new FormData();
                    formData.append('media', file);
                    let mediaType = '';
                    if (file.type.startsWith('image/')) {
                        mediaType = 'Image';
                    } else if (file.type.startsWith('video/')) {
                        mediaType = 'video';
                    }
                    else if (file.type.startsWith('Audio/')) {
                        mediaType = 'Audio';
                    }
                    formData.append('MediaType', mediaType);

                    try {
                        const response = await fetch('/api/media/upload', {
                            method: 'POST',
                            body: formData,
                        });
                        const result = await response.json();

                        if (response.ok && result.success) {
                            const media = result.data;

                            console.log(media._id); // The media object
                            
                            mediaIds.push(media._id);
                        } else {
                            alert(`Failed to upload media: ${result.error}`);
                        }
                    } catch (err) {
                        console.error('Error uploading file:', err);
                    }
                });

                await Promise.all(uploadPromises); // Wait for all uploads to complete
            }
            else{
                alert("can't read file");
            }

            try {

                console.log(mediaIds);
                const postResponse = await fetch('/post', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        content,
                        IsCommunityPost: isCommunityPost,
                        mediaIds: mediaIds,
                    }),
                });

                if (postResponse.ok) {
                    alert('Post created successfully!');
                    fetchPosts(); // Reload posts
                } else {
                    alert('Failed to create post.');
                }
            } catch (err) {
                console.error('Error creating post:', err);
            }
        });
        document.addEventListener('click', async function (e) {
            if (e.target.classList.contains('like-btn')) {
                const postId = e.target.getAttribute('data-post-id');
                // Gửi yêu cầu thích bài viết
                try {
                    const response = await fetch(`/post/${postId}/like`, { method: 'POST' });
                    if (response.ok) {
                        alert('You liked the post!');
                    } else {
                        alert('Failed to like the post.');
                    }
                } catch (err) {
                    console.error('Error liking post:', err);
                }
            }

            if (e.target.classList.contains('comment-btn')) {
                const postId = e.target.getAttribute('data-post-id');
                const commentInput = document.querySelector(`.comment-input[data-post-id="${postId}"]`);
                const comment = commentInput.value;

                // Gửi yêu cầu bình luận
                try {
                    const response = await fetch(`/post/${postId}/comment`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ comment }),
                    });
                    if (response.ok) {
                        alert('Comment added!');
                        commentInput.value = ''; // Xóa nội dung ô nhập
                        fetchComments(postId); // Tải lại bình luận
                    } else {
                        alert('Failed to add comment.');
                    }
                } catch (err) {
                    console.error('Error adding comment:', err);
                }
            }
        });

        // Hàm để lấy và hiển thị bình luận
        async function fetchComments(postId) {
            try {
                const response = await fetch(`/post/${postId}/comments`);
                const data = await response.json();
                const commentList = document.getElementById(`comments-${postId}`);
                commentList.innerHTML = '';

                data.comments.forEach(comment => {
                    commentList.innerHTML += `<p>${comment.text}</p>`;
                });
            } catch (error) {
                console.error('Error fetching comments:', error);
            }
        }
    
        document.getElementById('searchInput').addEventListener('input', async function () {
            const query = this.value;
            if (query.length > 0) {
                const response = await fetch(`/search?query=${encodeURIComponent(query)}`);
                const data = await response.json();
                const postsContainer = document.querySelector('.posts');
                postsContainer.innerHTML = '';

                data.posts.forEach(postData => {
                    const post = postData.post;
                    postsContainer.innerHTML += `
                        <div class="post">
                            <h3>${post.Author.username}</h3>
                            <p>${post.content}</p>
                            <div class="media" id="media-${post._id}"></div>
                        </div>`;
                });
            } else {
                fetchPosts(); // Reload all posts if search is cleared
            }
        });
        
        function toggleComment(event) {
            event.preventDefault();  // Ngăn chặn hành vi mặc định nếu cần
            const comment = document.getElementById("comment");
            if (comment.style.display === "flex") {
                comment.style.display = "none"; // Ẩn phần tử khi đã hiển thị
            } else {
                comment.style.display = "flex"; // Hiển thị phần tử ở giữa màn hình
            }
        }
    </script>
</body>
</html>
</body>
</html>
