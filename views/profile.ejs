<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/stylesheets/profile.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
</head>
<body>
    <header>
        <div class="logo">2 FRIEND</div>
        <nav>
            <ul>
                <li><a href="/">Home</a></li>
                <li><a href="/message">Messages</a></li>
                <li><a href="/community/page">Community</a></li>
                <li><a href="/friend/Orderfriend">Friend</a></li>
            </ul>
        </nav>
    </header>
    <main>
        <section class="profile-header">
            <div class="profile-img-container">
                <div class="profile-icon-container">
                    <img id="icon" src="..<%= avatar %>" alt="Profile Icon" class="profile-icon" />
                    <div id="change-img" class="btn-change-img">Change Image</div>
                </div>
            </div>
            <h1 class="username"><%= username %></h1>
            <p class="bio">
                This is a short bio about the user. It can include interests, hobbies, or a brief introduction.
            </p>
            <div class="profile-actions">
                <a href="/edit" class="button-settings">Edit Profile</a>
                <a href="/settings" class="button-settings">Settings</a>
                <a href="/logout" class="button-settings">Logout</a>
            </div>
        </section> 

        <section class="user-posts">
        <h2>Posts</h2>
        <div id="posts-container" class="posts-container"></div>
        </section>

        <!--
        <section class="user-list">
            <h2>Users</h2>
            <div id="user-list" class="user-list-container"></div>
            <p class="no-users" style="display: none;">No users found.</p>
        </section>
        -->
        <a href="/" class="btn-success">Back to Index</a>
    </main>
    <footer>

    </footer>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
    $(document).ready(function () {
        // Fetch user data
        // $.ajax({
        // url: '/api/users',
        // method: 'GET',
        // success: function (response) {
        //     let userList = $('#user-list');
        //     userList.empty();
        //     if (response.length > 0) {
        //     response.forEach((user) => {
        //         userList.append(
        //         '<p>User ID: ' + user.id + ', Name: ' + user.name + '</p>'
        //         );
        //     });
        //     } else {
        //     $('.no-users').show();
        //     }
        // },
        // error: function (err) {
        //     console.error('Error fetching users:', err);
        // },
        // });

        // Fetch posts data
    });

    async function fetchPosts() {
        try {
            const response = await fetch('/post/mypost');
            const data = await response.json();
            const postsContainer = document.querySelector('.posts-container');
            postsContainer.innerHTML = '';

            if (data.posts && data.posts.length > 0) {
                //console.log(data.posts);
                data.posts.forEach(async postData => {
                    const isLiked = await checkIfPostLiked(postData.post._id);
                    //const community = postData.post.Community._id;
                    //console.log(community);
                    //console.log(postData.post);
                    postsContainer.innerHTML += `
                        <div class="post">
                            ${postData.post.IsCommunityPost && postData.post.Community?._id != "67651ab7d883a8fa98ebfac4" ?  `<div><strong data-id="${postData.post.Community?._id}">Community Post:</strong> ${postData.post.Community?.name}</div>` : ''}
                            <h3>${postData.post.Author.username}</h3>
                            <div>
                                ${postData.post.content}
                            </div>
                            <div class="media" id="media-${postData.post._id}"></div>
                            
                            <div class="comments">
                                <h4 style="display: flex;"> 
                                        <button class="like-btn ${isLiked ? 'liked' : ''}" data-post-id="${postData.post._id}">
                                        <i class="far fa-heart"></i> Like
                                    </button>
                                    <button class="comment-btn" data-post-id="${postData.post._id}" onclick="toggleCommentOpen(event)"><i class="fas fa-comment"></i>comments</button>
                                </h4>
                                <div id="comment" style="display: none;">
                                    <div class="comment-container">
                                        <textarea placeholder="Add a comment..." class="comment-input" data-post-id="${postData.post._id}"></textarea>
                                        <button class="comment-btn-2" data-post-id="${postData.post._id}">Comment</button>
                                        <button onclick="toggleCommentClose(event)">Đóng</button>
                                        <div>Comment:</div>
                                        <div style="display: block;" class="comment-list" id="comments-${postData.post._id}"></div>
                                    </div> 
                                </div>
                            </div>
                        </div>`;

                    // Get the media container for this specific post
                    const mediaContainer = document.getElementById(`media-${postData.post._id}`);

                    if (postData.media && postData.media.length > 0) {
                        postData.media.forEach(postMedia => {
                            let mediaContent = '';
                            //console.log(postMedia.MediaType, postMedia.filepath );
                            if (postMedia.MediaType === 'Image') {
                                mediaContent = `<img src="..${postMedia.filepath}" alt="media" />`;
                            } else if (postMedia.MediaType === 'Video') {
                                mediaContent = `<video controls><source src="..${postMedia.filepath}" type="video/mp4"></video>`;
                            } else if (postMedia.MediaType === 'Audio') {
                                mediaContent = `<audio controls><source src="..${postMedia.filepath}" type="audio/mp3"></audio>`;
                            }
                            mediaContainer.innerHTML += mediaContent;
                        });
                    }
                });
            } else {
                postsContainer.innerHTML = `<p>No posts available.</p>`;
            }
        } catch (error) {
            console.error('Error fetching posts:', error);
        }
    }

    document.addEventListener('click', async function (e) {
        if (e.target.classList.contains('like-btn')) {
            const postId = e.target.getAttribute('data-post-id');
            const button = e.target;
            // Gửi yêu cầu thích bài viết
            try {
                const response = await fetch(`/post/like/${postId}`, { method: 'POST' });
                if (response.ok) {
                    const data = await response.json();
                    const notification = data.message;
                    alert(notification);
                    button.classList.toggle('liked');
                } else {
                    alert('Failed to like the post.');
                }
            } catch (err) {
                console.error('Error liking post:', err);
            }
        }

        if (e.target.classList.contains('comment-btn')) {
            const postId = e.target.getAttribute('data-post-id');
            //console.log(postId);
            fetchComments(postId);
        }

        if (e.target.classList.contains('comment-btn-2')) {
            const postId = e.target.getAttribute('data-post-id');
            const commentInput = document.querySelector(`.comment-input[data-post-id="${postId}"]`);
            const comment = commentInput.value;
            
            // Gửi yêu cầu bình luận
            try {
                const response = await fetch(`/comment`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ comment, postId }),
                });
                if (response.ok) {
                    const data = await response.json();
                    const message = data.message;
                    alert(message);
                    commentInput.value = ''; // Xóa nội dung ô nhập
                    fetchComments(postId); // Tải lại bình luận
                } else {
                    const errorData = await response.json();
                    alert(`Error: ${errorData.error || 'Something went wrong' || 'Failed to add comment.'}`);
                }
            } catch (err) {
                console.error('Error adding comment:', err);
            }
        }
    });

    // Hàm để lấy và hiển thị bình luận
    async function fetchComments(postId) {
        try {
            const response = await fetch(`/comment/getcomment`,{
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ postId }),
            });
            if (!response.ok) {
                throw new Error('Failed to fetch comments');
            }
            const data = await response.json();
            const commentList = document.getElementById(`comments-${postId}`);

            data.comments.forEach(comment => {
                let cm = document.createElement('p');
                cm.textContent = `${comment.Author.username}: ${comment.content}`;
                commentList.appendChild(cm);
            });
        } catch (error) {
            console.error('Error fetching comments:', error);
        }
    }

    async function checkIfPostLiked(postId) {
        try {
            const response = await fetch('/post/getlike', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ postId }),
            });
            const data = await response.json();
            return data.isLiked; // returns true or false based on the API response
        } catch (error) {
            console.error('Error checking like status:', error);
            return false; // Assume not liked if there's an error
        }
    }

    window.onload = function () {
        fetchPosts();
    };
    </script>
</body>
</html>

