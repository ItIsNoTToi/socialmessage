#!/usr/bin/env node

var app = require('../app'); // Import app
var debug = require('debug')('nnkb:server'); 
var http = require('http');

// Lấy port từ biến môi trường hoặc thiết lập mặc định
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

// Tạo HTTP server
var server = http.createServer(app);

// Tích hợp socket.io với server
const socketIo = require('socket.io');
const io = socketIo(server, {
  cors: {
    origin: "http://yourfrontend.com", // Thay bằng domain frontend của bạn
    methods: ["GET", "POST"],
    credentials: true
  }
});

/**
 * Lắng nghe sự kiện kết nối từ client
 */
io.on('connection', (socket) => {
  console.log('A user connected:', socket.id);

  // Sự kiện khi người dùng gửi tin nhắn
  socket.on('message', (data) => {
    console.log('Message from client:', data);
    
    // Phát lại tin nhắn tới tất cả các client khác (hoặc điều chỉnh theo nhu cầu)
    io.emit('message', data);
  });

  // Sự kiện khi người dùng ngắt kết nối
  socket.on('disconnect', () => {
    console.log('User disconnected:', socket.id);
  });
});

// Cung cấp io cho app
app.set('socketio', io);
const host = '0.0.0.0';
// Server lắng nghe trên port
server.listen(port,host, () => {
  console.log(`Server is running on port ${port}`);
});

server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) return val;
  if (port >= 0) return port;
  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') throw error;

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
